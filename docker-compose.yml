version: '3.8'

services:
  ml-router:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ml-router-app
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://mlrouter:password@db:5432/mlrouter
      - REDIS_URL=redis://redis:6379
      - SESSION_SECRET=your-long-random-secret-key-here
      - ROUTER_JWT_SECRET=jwt-signing-secret-here
      - FLASK_ENV=production
      # Add your AI provider API keys here
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      # Optional configuration
      - ROUTER_CACHE_TTL=3600
      - ROUTER_CACHE_SIZE=10000
      - ROUTER_MAX_CONCURRENT=50
      - ROUTER_RATE_LIMIT=1000
      - ROUTER_GLOBAL_RATE_LIMIT=5000
      - ROUTER_USE_ML=true
      - ROUTER_AUTH_ENABLED=true
    depends_on:
      - db
      - redis
    restart: unless-stopped
    volumes:
      - ./rag_data:/app/rag_data
      - ./models:/app/models
    networks:
      - ml-router-network

  db:
    image: postgres:16
    container_name: ml-router-db
    environment:
      - POSTGRES_USER=mlrouter
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mlrouter
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ml-router-network

  redis:
    image: redis:7-alpine
    container_name: ml-router-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ml-router-network

  nginx:
    image: nginx:alpine
    container_name: ml-router-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl  # Optional: for SSL certificates
    depends_on:
      - ml-router
    restart: unless-stopped
    networks:
      - ml-router-network

volumes:
  postgres_data:
  redis_data:

networks:
  ml-router-network:
    driver: bridge