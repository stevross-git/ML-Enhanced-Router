services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ml_router_db
      POSTGRES_USER: ml_router_user
      POSTGRES_PASSWORD: ml_router_password
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ml_router_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ml_router_user -d ml_router_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ml_router_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ML Router Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://ml_router_user:ml_router_password@db:5432/ml_router_db
      SQLALCHEMY_DATABASE_URI: postgresql://ml_router_user:ml_router_password@db:5432/ml_router_db
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      CACHE_REDIS_URL: redis://redis:6379/0
      
      # Application Configuration
      FLASK_ENV: production
      SECRET_KEY: your-super-secret-key-change-in-production
      SESSION_SECRET: your-session-secret-key-change-in-production
      
      # Security
      AUTH_ENABLED: "true"
      RATE_LIMIT_ENABLED: "true"
      
      # ML Router Configuration
      ML_ROUTER_ENABLED: "true"
      CACHE_ENABLED: "true"
      RAG_ENABLED: "true"
      
      # Logging
      LOG_LEVEL: INFO
      
      # API Keys (set these in production)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ml_router_network
    volumes:
      - ./instance:/app/instance
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@peoplesainetwork.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8080:80"
    depends_on:
      - db
    networks:
      - ml_router_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# Networks
networks:
  ml_router_network:
    driver: bridge